// Generated by CoffeeScript 1.10.0

/*
Copyright 2013 Simon Lydell

This file is part of parse-stack.

parse-stack is free software: you can redistribute it and/or modify it under the terms of the GNU
Lesser General Public License as published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.

parse-stack is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with parse-stack. If
not, see <http://www.gnu.org/licenses/>.
 */
var ensureType, formats, newline, parseStack;

formats = [/^\x20+at\x20(?:([^(]+)\x20\()?(.*?)(?::(\d+):(\d+))?\)?$/, /^([^@]*)@(\S*):(\d+)$/];

newline = /\r\n|\r|\n/;

parseStack = function(error) {
  var columnNumber, filepath, format, i, index, j, len, len1, lineNumber, match, name, prelude, ref, ref1, results, stack, stackLine, stackLines;
  if (typeof error.stack !== "string") {
    return null;
  }
  stack = error.stack;
  prelude = error.toString();
  if (stack.slice(0, prelude.length) === prelude) {
    stack = stack.slice(prelude.length);
  }
  stackLines = stack.split(newline).filter(function(stackLine) {
    return stackLine !== "";
  });
  for (i = 0, len = formats.length; i < len; i++) {
    format = formats[i];
    match = stackLines[0].match(format);
    if (match) {
      break;
    }
  }
  if (!match) {
    throw new Error("Unkown stack trace format:\n" + stack);
  }
  results = [];
  for (index = j = 0, len1 = stackLines.length; j < len1; index = ++j) {
    stackLine = stackLines[index];
    ref1 = (ref = stackLine.match(format)) != null ? ref : [], match = ref1[0], name = ref1[1], filepath = ref1[2], lineNumber = ref1[3], columnNumber = ref1[4];
    if (!match) {
      throw new Error("Unknown stack trace formatting on stack line " + (index + 1) + ":\n" + stackLine);
    }
    name = ensureType(String, name);
    filepath = ensureType(String, filepath);
    lineNumber = ensureType(Number, lineNumber);
    columnNumber = ensureType(Number, columnNumber);
    results.push({
      name: name,
      filepath: filepath,
      lineNumber: lineNumber,
      columnNumber: columnNumber
    });
  }
  return results;
};

ensureType = function(type, value) {
  if (value) {
    return type(value);
  } else {
    return void 0;
  }
};

module.exports = parseStack;
